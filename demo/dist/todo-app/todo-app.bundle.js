(()=>{var e={481:e=>{e.exports=function e(t,n,r){function s(o,a){if(!n[o]){if(!t[o]){if(i)return i(o,!0);var c=new Error("Cannot find module '"+o+"'");throw c.code="MODULE_NOT_FOUND",c}var l=n[o]={exports:{}};t[o][0].call(l.exports,(function(e){return s(t[o][1][e]||e)}),l,l.exports,e,t,n,r)}return n[o].exports}for(var i=void 0,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(e,t,n){"use strict";var r=e("fs"),s=e("path"),i=e("./utils"),o=!1,a=e("../package.json").version,c="locals",l=["delimiter","scope","context","debug","compileDebug","client","_with","rmWhitespace","strict","filename","async"],u=l.concat("cache"),h=/^\uFEFF/;function p(e,t){var s;if(t.some((function(t){return s=n.resolveInclude(e,t,!0),r.existsSync(s)})))return s}function d(e,t){var r,s=e.filename,i=arguments.length>1;if(e.cache){if(!s)throw new Error("cache option requires a filename");if(r=n.cache.get(s))return r;i||(t=m(s).toString().replace(h,""))}else if(!i){if(!s)throw new Error("Internal EJS error: no file name or template provided");t=m(s).toString().replace(h,"")}return r=n.compile(t,e),e.cache&&n.cache.set(s,r),r}function f(e,t,r){var s;if(!r){if("function"==typeof n.promiseImpl)return new n.promiseImpl((function(n,r){try{n(s=d(e)(t))}catch(e){r(e)}}));throw new Error("Please provide a callback function")}try{s=d(e)(t)}catch(e){return r(e)}r(null,s)}function m(e){return n.fileLoader(e)}function v(e,t){var s=i.shallowCopy({},t);if(s.filename=function(e,t){var s,i,o=t.views,a=/^[A-Za-z]+:\\|^\//.exec(e);if(a&&a.length)e=e.replace(/^\/*/,""),s=Array.isArray(t.root)?p(e,t.root):n.resolveInclude(e,t.root||"/",!0);else if(t.filename&&(i=n.resolveInclude(e,t.filename),r.existsSync(i)&&(s=i)),!s&&Array.isArray(o)&&(s=p(e,o)),!s&&"function"!=typeof t.includer)throw new Error('Could not find the include file "'+t.escapeFunction(e)+'"');return s}(e,s),"function"==typeof t.includer){var o=t.includer(e,s.filename);if(o&&(o.filename&&(s.filename=o.filename),o.template))return d(s,o.template)}return d(s)}function g(e,t,n,r,s){var i=t.split("\n"),o=Math.max(r-3,0),a=Math.min(i.length,r+3),c=s(n),l=i.slice(o,a).map((function(e,t){var n=t+o+1;return(n==r?" >> ":"    ")+n+"| "+e})).join("\n");throw e.path=c,e.message=(c||"ejs")+":"+r+"\n"+l+"\n\n"+e.message,e}function y(e){return e.replace(/;(\s*$)/,"$1")}function E(e,t){t=t||{};var r={};this.templateText=e,this.mode=null,this.truncate=!1,this.currentLine=1,this.source="",r.client=t.client||!1,r.escapeFunction=t.escape||t.escapeFunction||i.escapeXML,r.compileDebug=!1!==t.compileDebug,r.debug=!!t.debug,r.filename=t.filename,r.openDelimiter=t.openDelimiter||n.openDelimiter||"<",r.closeDelimiter=t.closeDelimiter||n.closeDelimiter||">",r.delimiter=t.delimiter||n.delimiter||"%",r.strict=t.strict||!1,r.context=t.context,r.cache=t.cache||!1,r.rmWhitespace=t.rmWhitespace,r.root=t.root,r.includer=t.includer,r.outputFunctionName=t.outputFunctionName,r.localsName=t.localsName||n.localsName||c,r.views=t.views,r.async=t.async,r.destructuredLocals=t.destructuredLocals,r.legacyInclude=void 0===t.legacyInclude||!!t.legacyInclude,r.strict?r._with=!1:r._with=void 0===t._with||t._with,this.opts=r,this.regex=this.createRegex()}n.cache=i.cache,n.fileLoader=r.readFileSync,n.localsName=c,n.promiseImpl=new Function("return this;")().Promise,n.resolveInclude=function(e,t,n){var r=s.dirname,i=s.extname,o=(0,s.resolve)(n?t:r(t),e);return i(e)||(o+=".ejs"),o},n.compile=function(e,t){return t&&t.scope&&(o||(console.warn("`scope` option is deprecated and will be removed in EJS 3"),o=!0),t.context||(t.context=t.scope),delete t.scope),new E(e,t).compile()},n.render=function(e,t,n){var r=t||{},s=n||{};return 2==arguments.length&&i.shallowCopyFromList(s,r,l),d(s,e)(r)},n.renderFile=function(){var e,t,n,r=Array.prototype.slice.call(arguments),s=r.shift(),o={filename:s};return"function"==typeof arguments[arguments.length-1]&&(e=r.pop()),r.length?(t=r.shift(),r.length?i.shallowCopy(o,r.pop()):(t.settings&&(t.settings.views&&(o.views=t.settings.views),t.settings["view cache"]&&(o.cache=!0),(n=t.settings["view options"])&&i.shallowCopy(o,n)),i.shallowCopyFromList(o,t,u)),o.filename=s):t={},f(o,t,e)},n.Template=E,n.clearCache=function(){n.cache.reset()},E.modes={EVAL:"eval",ESCAPED:"escaped",RAW:"raw",COMMENT:"comment",LITERAL:"literal"},E.prototype={createRegex:function(){var e="(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)",t=i.escapeRegExpChars(this.opts.delimiter),n=i.escapeRegExpChars(this.opts.openDelimiter),r=i.escapeRegExpChars(this.opts.closeDelimiter);return e=e.replace(/%/g,t).replace(/</g,n).replace(/>/g,r),new RegExp(e)},compile:function(){var e,t,n,r=this.opts,o="",a="",c=r.escapeFunction,l=r.filename?JSON.stringify(r.filename):"undefined";if(!this.source){if(this.generateSource(),o+='  var __output = "";\n  function __append(s) { if (s !== undefined && s !== null) __output += s }\n',r.outputFunctionName&&(o+="  var "+r.outputFunctionName+" = __append;\n"),r.destructuredLocals&&r.destructuredLocals.length){for(var u="  var __locals = ("+r.localsName+" || {}),\n",h=0;h<r.destructuredLocals.length;h++){var p=r.destructuredLocals[h];h>0&&(u+=",\n  "),u+=p+" = __locals."+p}o+=u+";\n"}!1!==r._with&&(o+="  with ("+r.localsName+" || {}) {\n",a+="  }\n"),a+="  return __output;\n",this.source=o+this.source+a}e=r.compileDebug?"var __line = 1\n  , __lines = "+JSON.stringify(this.templateText)+"\n  , __filename = "+l+";\ntry {\n"+this.source+"} catch (e) {\n  rethrow(e, __lines, __filename, __line, escapeFn);\n}\n":this.source,r.client&&(e="escapeFn = escapeFn || "+c.toString()+";\n"+e,r.compileDebug&&(e="rethrow = rethrow || "+g.toString()+";\n"+e)),r.strict&&(e='"use strict";\n'+e),r.debug&&console.log(e),r.compileDebug&&r.filename&&(e=e+"\n//# sourceURL="+l+"\n");try{if(r.async)try{n=new Function("return (async function(){}).constructor;")()}catch(e){throw e instanceof SyntaxError?new Error("This environment does not support async/await"):e}else n=Function;t=new n(r.localsName+", escapeFn, include, rethrow",e)}catch(e){throw e instanceof SyntaxError&&(r.filename&&(e.message+=" in "+r.filename),e.message+=" while compiling ejs\n\n",e.message+="If the above error is not helpful, you may want to try EJS-Lint:\n",e.message+="https://github.com/RyanZim/EJS-Lint",r.async||(e.message+="\n",e.message+="Or, if you meant to create an async function, pass `async: true` as an option.")),e}var d=r.client?t:function(e){return t.apply(r.context,[e||{},c,function(t,n){var s=i.shallowCopy({},e);return n&&(s=i.shallowCopy(s,n)),v(t,r)(s)},g])};if(r.filename&&"function"==typeof Object.defineProperty){var f=r.filename,m=s.basename(f,s.extname(f));try{Object.defineProperty(d,"name",{value:m,writable:!1,enumerable:!1,configurable:!0})}catch(e){}}return d},generateSource:function(){this.opts.rmWhitespace&&(this.templateText=this.templateText.replace(/[\r\n]+/g,"\n").replace(/^\s+|\s+$/gm,"")),this.templateText=this.templateText.replace(/[ \t]*<%_/gm,"<%_").replace(/_%>[ \t]*/gm,"_%>");var e=this,t=this.parseTemplateText(),n=this.opts.delimiter,r=this.opts.openDelimiter,s=this.opts.closeDelimiter;t&&t.length&&t.forEach((function(i,o){var a;if(0===i.indexOf(r+n)&&0!==i.indexOf(r+n+n)&&(a=t[o+2])!=n+s&&a!="-"+n+s&&a!="_"+n+s)throw new Error('Could not find matching close tag for "'+i+'".');e.scanLine(i)}))},parseTemplateText:function(){for(var e,t=this.templateText,n=this.regex,r=n.exec(t),s=[];r;)0!==(e=r.index)&&(s.push(t.substring(0,e)),t=t.slice(e)),s.push(r[0]),t=t.slice(r[0].length),r=n.exec(t);return t&&s.push(t),s},_addOutput:function(e){if(this.truncate&&(e=e.replace(/^(?:\r\n|\r|\n)/,""),this.truncate=!1),!e)return e;e=(e=(e=(e=e.replace(/\\/g,"\\\\")).replace(/\n/g,"\\n")).replace(/\r/g,"\\r")).replace(/"/g,'\\"'),this.source+='    ; __append("'+e+'")\n'},scanLine:function(e){var t,n=this.opts.delimiter,r=this.opts.openDelimiter,s=this.opts.closeDelimiter;switch(t=e.split("\n").length-1,e){case r+n:case r+n+"_":this.mode=E.modes.EVAL;break;case r+n+"=":this.mode=E.modes.ESCAPED;break;case r+n+"-":this.mode=E.modes.RAW;break;case r+n+"#":this.mode=E.modes.COMMENT;break;case r+n+n:this.mode=E.modes.LITERAL,this.source+='    ; __append("'+e.replace(r+n+n,r+n)+'")\n';break;case n+n+s:this.mode=E.modes.LITERAL,this.source+='    ; __append("'+e.replace(n+n+s,n+s)+'")\n';break;case n+s:case"-"+n+s:case"_"+n+s:this.mode==E.modes.LITERAL&&this._addOutput(e),this.mode=null,this.truncate=0===e.indexOf("-")||0===e.indexOf("_");break;default:if(this.mode){switch(this.mode){case E.modes.EVAL:case E.modes.ESCAPED:case E.modes.RAW:e.lastIndexOf("//")>e.lastIndexOf("\n")&&(e+="\n")}switch(this.mode){case E.modes.EVAL:this.source+="    ; "+e+"\n";break;case E.modes.ESCAPED:this.source+="    ; __append(escapeFn("+y(e)+"))\n";break;case E.modes.RAW:this.source+="    ; __append("+y(e)+")\n";break;case E.modes.COMMENT:break;case E.modes.LITERAL:this._addOutput(e)}}else this._addOutput(e)}this.opts.compileDebug&&t&&(this.currentLine+=t,this.source+="    ; __line = "+this.currentLine+"\n")}},n.escapeXML=i.escapeXML,n.__express=n.renderFile,n.VERSION=a,n.name="ejs","undefined"!=typeof window&&(window.ejs=n)},{"../package.json":6,"./utils":2,fs:3,path:4}],2:[function(e,t,n){"use strict";var r=/[|\\{}()[\]^$+*?.]/g;n.escapeRegExpChars=function(e){return e?String(e).replace(r,"\\$&"):""};var s={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&#34;","'":"&#39;"},i=/[&<>'"]/g;function o(e){return s[e]||e}n.escapeXML=function(e){return null==e?"":String(e).replace(i,o)},n.escapeXML.toString=function(){return Function.prototype.toString.call(this)+';\nvar _ENCODE_HTML_RULES = {\n      "&": "&amp;"\n    , "<": "&lt;"\n    , ">": "&gt;"\n    , \'"\': "&#34;"\n    , "\'": "&#39;"\n    }\n  , _MATCH_HTML = /[&<>\'"]/g;\nfunction encode_char(c) {\n  return _ENCODE_HTML_RULES[c] || c;\n};\n'},n.shallowCopy=function(e,t){for(var n in t=t||{})e[n]=t[n];return e},n.shallowCopyFromList=function(e,t,n){for(var r=0;r<n.length;r++){var s=n[r];void 0!==t[s]&&(e[s]=t[s])}return e},n.cache={_data:{},set:function(e,t){this._data[e]=t},get:function(e){return this._data[e]},remove:function(e){delete this._data[e]},reset:function(){this._data={}}},n.hyphenToCamel=function(e){return e.replace(/-[a-z]/g,(function(e){return e[1].toUpperCase()}))}},{}],3:[function(e,t,n){},{}],4:[function(e,t,n){(function(e){function t(e,t){for(var n=0,r=e.length-1;r>=0;r--){var s=e[r];"."===s?e.splice(r,1):".."===s?(e.splice(r,1),n++):n&&(e.splice(r,1),n--)}if(t)for(;n--;n)e.unshift("..");return e}function r(e,t){if(e.filter)return e.filter(t);for(var n=[],r=0;r<e.length;r++)t(e[r],r,e)&&n.push(e[r]);return n}n.resolve=function(){for(var n="",s=!1,i=arguments.length-1;i>=-1&&!s;i--){var o=i>=0?arguments[i]:e.cwd();if("string"!=typeof o)throw new TypeError("Arguments to path.resolve must be strings");o&&(n=o+"/"+n,s="/"===o.charAt(0))}return(s?"/":"")+(n=t(r(n.split("/"),(function(e){return!!e})),!s).join("/"))||"."},n.normalize=function(e){var i=n.isAbsolute(e),o="/"===s(e,-1);return(e=t(r(e.split("/"),(function(e){return!!e})),!i).join("/"))||i||(e="."),e&&o&&(e+="/"),(i?"/":"")+e},n.isAbsolute=function(e){return"/"===e.charAt(0)},n.join=function(){var e=Array.prototype.slice.call(arguments,0);return n.normalize(r(e,(function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e})).join("/"))},n.relative=function(e,t){function r(e){for(var t=0;t<e.length&&""===e[t];t++);for(var n=e.length-1;n>=0&&""===e[n];n--);return t>n?[]:e.slice(t,n-t+1)}e=n.resolve(e).substr(1),t=n.resolve(t).substr(1);for(var s=r(e.split("/")),i=r(t.split("/")),o=Math.min(s.length,i.length),a=o,c=0;c<o;c++)if(s[c]!==i[c]){a=c;break}var l=[];for(c=a;c<s.length;c++)l.push("..");return(l=l.concat(i.slice(a))).join("/")},n.sep="/",n.delimiter=":",n.dirname=function(e){if("string"!=typeof e&&(e+=""),0===e.length)return".";for(var t=e.charCodeAt(0),n=47===t,r=-1,s=!0,i=e.length-1;i>=1;--i)if(47===(t=e.charCodeAt(i))){if(!s){r=i;break}}else s=!1;return-1===r?n?"/":".":n&&1===r?"/":e.slice(0,r)},n.basename=function(e,t){var n=function(e){"string"!=typeof e&&(e+="");var t,n=0,r=-1,s=!0;for(t=e.length-1;t>=0;--t)if(47===e.charCodeAt(t)){if(!s){n=t+1;break}}else-1===r&&(s=!1,r=t+1);return-1===r?"":e.slice(n,r)}(e);return t&&n.substr(-1*t.length)===t&&(n=n.substr(0,n.length-t.length)),n},n.extname=function(e){"string"!=typeof e&&(e+="");for(var t=-1,n=0,r=-1,s=!0,i=0,o=e.length-1;o>=0;--o){var a=e.charCodeAt(o);if(47!==a)-1===r&&(s=!1,r=o+1),46===a?-1===t?t=o:1!==i&&(i=1):-1!==t&&(i=-1);else if(!s){n=o+1;break}}return-1===t||-1===r||0===i||1===i&&t===r-1&&t===n+1?"":e.slice(t,r)};var s=function(e,t,n){return e.substr(t,n)}}).call(this,e("_process"))},{_process:5}],5:[function(e,t,n){var r,s,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(e){if(r===setTimeout)return setTimeout(e,0);if((r===o||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:o}catch(e){r=o}try{s="function"==typeof clearTimeout?clearTimeout:a}catch(e){s=a}}();var l,u=[],h=!1,p=-1;function d(){h&&l&&(h=!1,l.length?u=l.concat(u):p=-1,u.length&&f())}function f(){if(!h){var e=c(d);h=!0;for(var t=u.length;t;){for(l=u,u=[];++p<t;)l&&l[p].run();p=-1,t=u.length}l=null,h=!1,function(e){if(s===clearTimeout)return clearTimeout(e);if((s===a||!s)&&clearTimeout)return s=clearTimeout,clearTimeout(e);try{s(e)}catch(t){try{return s.call(null,e)}catch(t){return s.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function v(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new m(e,t)),1!==u.length||h||c(f)},m.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},{}],6:[function(e,t,n){t.exports={name:"ejs",description:"Embedded JavaScript templates",keywords:["template","engine","ejs"],version:"3.1.6",author:"Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)",license:"Apache-2.0",bin:{ejs:"./bin/cli.js"},main:"./lib/ejs.js",jsdelivr:"ejs.min.js",unpkg:"ejs.min.js",repository:{type:"git",url:"git://github.com/mde/ejs.git"},bugs:"https://github.com/mde/ejs/issues",homepage:"https://github.com/mde/ejs",dependencies:{jake:"^10.6.1"},devDependencies:{browserify:"^16.5.1",eslint:"^6.8.0","git-directory-deploy":"^1.5.1",jsdoc:"^3.6.4","lru-cache":"^4.0.1",mocha:"^7.1.1","uglify-js":"^3.3.16"},engines:{node:">=0.10.0"},scripts:{test:"mocha"}}},{}]},{},[1])(1)}},t={};function n(r){var s=t[r];if(void 0!==s)return s.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}(()=>{"use strict";n(481);const e="object"==typeof global&&global&&global.Object===Object&&global;var t="object"==typeof self&&self&&self.Object===Object&&self;const r=(e||t||Function("return this")()).Symbol,i=Array.isArray;var o=Object.prototype,a=o.hasOwnProperty,c=o.toString,l=r?r.toStringTag:void 0;var u=Object.prototype.toString;var h=r?r.toStringTag:void 0;const p=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":h&&h in Object(e)?function(e){var t=a.call(e,l),n=e[l];try{e[l]=void 0;var r=!0}catch(e){}var s=c.call(e);return r&&(t?e[l]=n:delete e[l]),s}(e):function(e){return u.call(e)}(e)};var d=r?r.prototype:void 0,f=d?d.toString:void 0;const m=function e(t){if("string"==typeof t)return t;if(i(t))return function(e,t){for(var n=-1,r=null==e?0:e.length,s=Array(r);++n<r;)s[n]=t(e[n],n,e);return s}(t,e)+"";if(function(e){return"symbol"==typeof e||function(e){return null!=e&&"object"==typeof e}(e)&&"[object Symbol]"==p(e)}(t))return f?f.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n},v=function(e,t,n){var r=e.length;return n=void 0===n?r:n,!t&&n>=r?e:function(e,t,n){var r=-1,s=e.length;t<0&&(t=-t>s?0:s+t),(n=n>s?s:n)<0&&(n+=s),s=t>n?0:n-t>>>0,t>>>=0;for(var i=Array(s);++r<s;)i[r]=e[r+t];return i}(e,t,n)},g=function(e){return e!=e};var y=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");var E="[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",w="\\ud83c[\\udffb-\\udfff]",_="[^\\ud800-\\udfff]",b="(?:\\ud83c[\\udde6-\\uddff]){2}",L="[\\ud800-\\udbff][\\udc00-\\udfff]",x="(?:"+E+"|"+w+")?",T="[\\ufe0e\\ufe0f]?",S=T+x+"(?:\\u200d(?:"+[_,b,L].join("|")+")"+T+x+")*",A="(?:"+[_+E+"?",E,b,L,"[\\ud800-\\udfff]"].join("|")+")",j=RegExp(w+"(?="+w+")|"+A+S,"g");const C=function(e){return function(e){return y.test(e)}(e)?function(e){return e.match(j)||[]}(e):function(e){return e.split("")}(e)};var I=/^\s+/;const O=function(e,t,n){if((e=null==(r=e)?"":m(r))&&(n||void 0===t))return e.replace(I,"");var r;if(!e||!(t=m(t)))return e;var s=C(e),i=function(e,t){for(var n=-1,r=e.length;++n<r&&(s=t,i=e[n],o=0,(i==i?function(e,t,n){for(var r=n-1,s=e.length;++r<s;)if(e[r]===t)return r;return-1}(s,i,o):function(e,t,n,r){for(var s=e.length,i=n+(r?1:-1);r?i--:++i<s;)if(t(e[i],i,e))return i;return-1}(s,g,o))>-1););var s,i,o;return n}(s,C(t));return v(s,i).join("")};function k(e,t){e=(e=e.replaceAll(" el="," data-element=")).replaceAll(/\son(\w+)="/g,' data-on-$1="');var n=ejs.render(e,t),r=[],s=0;return{html:n=n.replaceAll(/\sstate="(.*)"/g,(function(e,t){var n=document.createElement("div");n.innerHTML=t,r.push(JSON.parse(n.innerText));var i=' data-state-stub="'+s+'"';return s+=1,i})),states:r}}function N(e,t){var n=e.split("}");return n.pop(),(n=n.map((e=>(new RegExp("\n*s*"+t,"g").test(e)?"":t+" ")+O(e)+"}\n\n")).filter((e=>""!=e))).join("")}function R(e=[],t,n=[]){var r=[];e.forEach((e=>{if(e.nodeType==Node.ELEMENT_NODE&&(t(e),!n.includes(e.tagName.toLowerCase())))for(var s=e.childNodes,i=0;i<s.length;i++)r.push(s[i])})),r.length>0&&R(r,t,n)}var D=class extends class{constructor(e){e.selector?this.eventTarget=document.querySelector(e.selector):e.domElement&&(this.eventTarget=e.domElement),this.events=[],this.listeners={}}addEventListener(e,t){this.firesEvent(e)?this.listeners[e]?this.listeners[e].push(t):this.listeners[e]=[t]:this.eventTarget&&this.eventTarget.addEventListener(e,t)}on(e,t){this.addEventListener(e,t)}removeEventListener(e,t){this.firesEvent(e)&&this.listeners[e]&&-1!=this.listeners[e].indexOf[t]&&this._removeEventListener(e,t)}off(e,t){s,this.removeEventListener(e,t)}removeEventListeners(){this.events.forEach((e=>{this.listeners[e]&&this.listeners[e].forEach((t=>{this._removeEventListener(e,t)}))}))}registerEvent(e){this.firesEvent(e)||this.events.push(e)}firesEvent(e){return-1!=this.events.indexOf(e)}dispatchEvent(e,t={}){console.log("In Evented.dispatchEvent");try{if(!this.firesEvent(e))throw new Error(`Evented: no event ${e} registered`);if(this.eventTarget){var n=new CustomEvent("loki-"+e,{detail:{domEvent:!0,targetComponent:this,...t}});console.log("custom event called on",this.constructor.name,"is",n),this.eventTarget.dispatchEvent(n)}else console.log("in else"),this.listeners[e]&&this.listeners.name.forEach((e=>{e({detail:{domEvent:!1,targetComponent:this,...t}})}))}catch(n){throw console.error("dispatchEvent failed in Evented"),console.error(n),n}}emit(e,t){this.dispatchEvent(e,t)}_removeEventListener(e,t){this.eventTarget&&this.eventTarget.removeEventListener("loki-"+e,t),this.listeners[e].splice(this.listeners[e].indexOf(t),1)}}{static nextUid=0;static selector="loki-component";static components=[];static events=[];constructor(e={}){if(e.selector)super(e),this.container=document.querySelector(e.selector);else if(e.domElement)super(e),this.container=e.domElement;else{super(e);var t=this.constructor.selector;this.container=document.createElement(t)}this.uid=this.constructor.selector+"-"+this.constructor.nextUid++,this.state=e.state?e.state:{},this.elements={},this.components={},e.toplevel&&(this.toplevel=e.toplevel,this.constructor._appendStyles({isRoot:!0}));var{html:n,states:r}=k(this.render(),this.state);this.container.innerHTML=n,this._initComponents(r),this._captureElements(),this._registerEvents(),e.toplevel&&this._autoAttachEventListeners(),this.addEventListener()}render(){return"<h1>Loki Component</h1>"}static style(){return""}addEventListeners(){}componentDidMount(){}componentWillUnmount(){}beforeUpdate(){}afterUpdate(){}static init(e){return new this.constructor({toplevel:!0,...e})}setState(e){if(e&&"object"==typeof e){this.beforeUpdate(),this.unmount(),this.state={...this.state,...e};var{html:t,states:n}=k(this.render(),this.state);this.container.innerHTML=t,this._initComponents(n),this._captureElements(),this._registerEvents(),this.toplevel&&this._autoAttachEventListeners(),this.addEventListener(),this.afterUpdate()}}querySelector(e){var t=this.container.querySelector(e);return t.dataset.componentId?this.components[t.dataset.componentId]:t}unmount(){this.removeEventListeners(),this._releaseElements(),this._unmountComponents()}static _appendStyles(e={}){if(e.isRoot)(t=document.createElement("style")).type="text/css",t.id=this.selector+"-style",t.innerHTML=N(this.style(),this.selector),document.head.appendChild(t),this.components.forEach((e=>{e._appendStyles({styleId:t.id,isRoot:!1})}));else{if(!e.styleId)throw new Error("Component: _appendStyles expects opts.styleId to append component to the correct style tag");var t;(t=document.querySelector("#"+e.styleId)).innerHTML+=N(this.style(),this.selector),this.components.forEach((t=>{t._appendStyles({styleId:e.styleId,isRoot:!1})}))}}static _getRegisteredSelectors(){return this.components.map((e=>e.selector))}static _getSelectorToComponentMap(){var e={};return this.components.forEach((t=>{e[t.selector]=t})),e}_autoAttachEventListeners(){for(var e=this.constructor._getRegisteredSelectors(),t=[],n=0;n<this.container.childNodes.length;n++)t.push(this.container.childNodes[n]);for(var r in R(t,(t=>{var n=e.includes(t.tagName.toLowerCase()),r=JSON.parse(JSON.stringify(t.dataset));for(var s in r)if(/^on/g.test(s)){var i=s.replace("on","").toLowerCase();if(n){var o=r.componentId;this.components[o].addEventListener(i,this[r[s]].bind(this))}else t.addEventListener(i,this[r[s]].bind(this))}}),e),this.components)this.components[r]._autoAttachEventListeners()}_captureElements(){this.elements=[];for(var e=this.container.querySelectorAll("[data-element]"),t=(this.constructor._getSelectorToComponentMap(),0);t<e.length;t++){var n=e[t];this.constructor._getRegisteredSelectors().includes(n.tagName.toLowerCase())?this.elements[n.dataset.element]=this.components[n.dataset.componentId]:this.elements[n.dataset.element]=n}}_releaseElements(){for(var e in this.elements)delete this.elements[e]}_initComponents(e){var t=this.constructor._getRegisteredSelectors(),n=this.constructor._getSelectorToComponentMap();t.forEach((t=>{for(var r=this.container.querySelectorAll(t),s=0;s<r.length;s++){var i=e[parseInt(r[s].dataset.stateStub)],o=new(0,n[t])({domElement:r[s],state:i});r[s].dataset.element&&(this.elements[r[s].dataset.element]=o),this.components[o.uid]=o,r[s].dataset.componentId=o.uid}}))}_unmountComponents(){for(var e in this.components)this.components[e].unmount(),delete this.components[e]}_registerEvents(){this.constructor.events.forEach((e=>{this.registerEvent(e)}))}};const F=class extends D{static selector="todo-index";static components=[];static events=[];render(){return'\n            <h2>Todo Index</h2>\n            <ol>\n            <% lists.forEach(list => { %>\n                <li><a href="#"><%= list.title %></a></li>\n            <% }) %>\n            </ol>\n        '}static style(){return"\n            .classB {\n                display: block;\n            }\n        "}},M=class extends D{static selector="todo-list";static components=[];render(){return'\n            <h2><%= title %></h2>\n            <ol>\n            <% todoItems.forEach(todo => { %>\n                <li><%= todo.title %><input type="checkbox" onclick="sayWowza" /></li>\n            <% }) %>\n            </ol>\n        '}static style(){return"\n            todo-list {\n                display: block;\n            }\n            .classC {\n                position: relative;\n            }\n        "}sayWowza(e){console.error("e:",e),console.error("WOWZAA!!"),e.stopPropagation()}},H=class extends D{static selector="todo-app";static components=[F,M];static events=["click"];render(){return this.state={...this.state,lists:[{type:"TodoList",id:1,title:"Reminders",todoItems:[{type:"TodoItem",title:"Feed bilbo",done:!1},{type:"TodoItem",title:"Feed Honeybee",done:!1},{type:"TodoItem",title:"Study for driving permit test",done:!1}]},{type:"TodoList",id:2,title:"Work",todoItems:[{type:"TodoItem",title:"Do paperwork for new job",done:!1},{type:"TodoItem",title:"File new re-imbursements",done:!1}]}],showIndex:!0},'\n            <h1 el="title" onclick="sayHi">Todo App</h1>\n            <todo-index \n                el="index" \n                state="<%= JSON.stringify({lists: lists.map(l => {return {id: l.id, title: l.title};})}) %>">\n            </todo-index>\n            <todo-list \n                el="list"\n                state="<%= JSON.stringify(lists[0]) %>" \n                onclick="sayBye">\n            </todo-list>\n        '}static style(){return"\n            .classA {\n                display: block;\n            }\n        "}sayHi(){console.warn("HEY THERE!")}sayBye(){console.warn("DASVIDANYA!")}};window.addEventListener("load",(function(){console.log("Attempting to init todo-app!");var e=new H({selector:"loki-app",toplevel:!0});window["todo-app"]=e}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,